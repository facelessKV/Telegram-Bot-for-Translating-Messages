import os
import json
import logging
import asyncio
from typing import Dict, Any
import httpx
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold, hitalic
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
# –î–ª—è Google Translate API: https://cloud.google.com/translate/docs/setup
TRANSLATE_API_KEY = 'YOUR_TRANSLATE_API_KEY'

# –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ API –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
# - Google Translate API
# - Yandex Translate API
# - Microsoft Translator API
# - DeepL API

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class UserState(StatesGroup):
    waiting_for_text = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
user_preferences = {}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ (–∫–æ–¥: –Ω–∞–∑–≤–∞–Ω–∏–µ)
SUPPORTED_LANGUAGES = {
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
    'zh': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
    'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π',
    'ko': '–ö–æ—Ä–µ–π—Å–∫–∏–π',
    'ar': '–ê—Ä–∞–±—Å–∫–∏–π',
    'hi': '–•–∏–Ω–¥–∏',
    'pt': '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π',
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_user_preferences():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
    with open('user_preferences.json', 'w', encoding='utf-8') as f:
        json.dump(user_preferences, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_user_preferences():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global user_preferences
    try:
        with open('user_preferences.json', 'r', encoding='utf-8') as f:
            user_preferences = json.load(f)
    except FileNotFoundError:
        user_preferences = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def detect_language(text: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Google Translate API
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        
    Returns:
        –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'en', 'ru')
    """
    # URL –¥–ª—è Google Translate API - detect language
    url = f"https://translation.googleapis.com/language/translate/v2/detect"
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                url,
                params={"key": TRANSLATE_API_KEY},
                data={"q": text}
            )
            
            if response.status_code == 200:
                result = response.json()
                detected_language = result["data"]["detections"][0][0]["language"]
                return detected_language
            else:
                logger.error(f"Error detecting language: {response.text}")
                return "en"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    except Exception as e:
        logger.error(f"Exception when detecting language: {e}")
        return "en"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
async def translate_text(text: str, target_lang: str, source_lang: str = None) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —Å –ø–æ–º–æ—â—å—é Google Translate API
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 'en', 'ru')
        source_lang: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–∫–æ–¥). –ï—Å–ª–∏ None, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
    Returns:
        –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # URL –¥–ª—è Google Translate API
    url = f"https://translation.googleapis.com/language/translate/v2"
    
    params = {
        "key": TRANSLATE_API_KEY,
        "q": text,
        "target": target_lang,
    }
    
    if source_lang:
        params["source"] = source_lang
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, params=params)
            
            if response.status_code == 200:
                result = response.json()
                translated_text = result["data"]["translations"][0]["translatedText"]
                return translated_text
            else:
                logger.error(f"Error translating text: {response.text}")
                return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    except Exception as e:
        logger.error(f"Exception when translating: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = str(message.from_user.id)
    user_name = message.from_user.first_name
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    if user_id not in user_preferences:
        user_preferences[user_id] = {"target_lang": "en"}
        save_user_preferences()
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        f"–Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        f"‚Ä¢ /translate - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç\n"
        f"‚Ä¢ /set_lang - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: {hbold(SUPPORTED_LANGUAGES[user_preferences[user_id]['target_lang']])}"
    )
    
    await message.answer(welcome_text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate
@router.message(Command("translate"))
async def cmd_translate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await state.set_state(UserState.waiting_for_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
@router.message(StateFilter(UserState.waiting_for_text))
async def process_text_to_translate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥"""
    user_id = str(message.from_user.id)
    text_to_translate = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_lang = user_preferences.get(user_id, {}).get("target_lang", "en")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
    await message.answer("üîç –û–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–≤–æ–∂—É...")
    source_lang = await detect_language(text_to_translate)
    
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º, –º–µ–Ω—è–µ–º —Ü–µ–ª–µ–≤–æ–π
    if source_lang == target_lang:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∏–Ω–∞—á–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        target_lang = "ru" if source_lang == "en" else "en"
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    translated_text = await translate_text(text_to_translate, target_lang, source_lang)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üìã {hbold('–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:')}\n"
        f"{text_to_translate}\n\n"
        f"üåç {hbold('–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫:')} {SUPPORTED_LANGUAGES.get(source_lang, source_lang)}\n\n"
        f"üî§ {hbold('–ü–µ—Ä–µ–≤–æ–¥')} ({SUPPORTED_LANGUAGES.get(target_lang, target_lang)}):\n"
        f"{translated_text}"
    )
    
    await message.answer(response, parse_mode=ParseMode.HTML)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_lang
@router.message(Command("set_lang"))
async def cmd_set_lang(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_lang - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    rows = []
    current_row = []
    
    for lang_code, lang_name in SUPPORTED_LANGUAGES.items():
        current_row.append(types.InlineKeyboardButton(
            text=lang_name,
            callback_data=f"lang_{lang_code}"
        ))
        
        if len(current_row) == 2:
            rows.append(current_row)
            current_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if current_row:
        rows.append(current_row)
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=rows)
    
    await message.answer(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.callback_query(F.data.startswith('lang_'))
async def process_callback_language(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞
    await callback.answer()
    
    user_id = str(callback.from_user.id)
    lang_code = callback.data.split('_')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_preferences:
        user_preferences[user_id] = {}
    
    user_preferences[user_id]["target_lang"] = lang_code
    save_user_preferences()
    
    await callback.message.answer(
        f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {SUPPORTED_LANGUAGES[lang_code]}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã /translate)
@router.message(F.text & ~F.text.startswith('/'))
async def direct_translate(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    user_id = str(message.from_user.id)
    text_to_translate = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_lang = user_preferences.get(user_id, {}).get("target_lang", "en")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
    source_lang = await detect_language(text_to_translate)
    
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º, –º–µ–Ω—è–µ–º —Ü–µ–ª–µ–≤–æ–π
    if source_lang == target_lang:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∏–Ω–∞—á–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        target_lang = "ru" if source_lang == "en" else "en"
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    translated_text = await translate_text(text_to_translate, target_lang, source_lang)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üåç {hbold(SUPPORTED_LANGUAGES.get(source_lang, source_lang))} ‚Üí "
        f"{hbold(SUPPORTED_LANGUAGES.get(target_lang, target_lang))}:\n"
        f"{translated_text}"
    )
    
    await message.answer(response, parse_mode=ParseMode.HTML)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    load_user_preferences()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot, skip_updates=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())